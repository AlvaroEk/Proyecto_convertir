{"version":3,"sources":["server.js"],"names":["express","require","app","session","path","router","flash","conversionController","LocalStrategy","Strategy","usuarios","multer","dotenv","MySQLStore","cookieParser","passport","authMiddleware","use","json","urlencoded","extended","sessionStore","host","process","env","MYSQL_HOST","port","MYSQL_PORT","user","MYSQL_USER","password","MYSQL_PASSWORD","database","MYSQL_DATABASE","secret","ACCESS_TOKEN_SECRET","resave","saveUninitialized","store","initialize","err","req","res","next","console","error","stack","status","send","username","done","obtenerPorNombre","message","comparePassword","contraseña","passwordMatch","serializeUser","id","deserializeUser","obtenerPorId","then","set","join","__dirname","storage","memoryStorage","upload","single","post","convertirImagen","listen","log"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst app = express();\r\nconst session = require('express-session');\r\nconst path = require('path');\r\nconst router = require('./routes/routes');\r\nconst flash = require('connect-flash');\r\nconst conversionController = require('./controllers/conversionController'); \r\nconst LocalStrategy = require('passport-local').Strategy;\r\nconst usuarios = require('./models/usermodel');\r\nconst multer = require('multer');\r\nconst dotenv = require('dotenv');\r\nconst MySQLStore = require('express-mysql-session')(session);\r\nconst cookieParser = require('cookie-parser');\r\nconst passport = require('passport');\r\nconst authMiddleware = require('./middlewares/authMiddleware'); \r\n\r\n// Middleware para procesar archivos estáticos en la carpeta 'public'\r\napp.use(express.static('public'));\r\napp.use(express.json());\r\n\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\nconst sessionStore = new MySQLStore({\r\n  host: process.env.MYSQL_HOST,\r\n  port: process.env.MYSQL_PORT,\r\n  user: process.env.MYSQL_USER,\r\n  password: process.env.MYSQL_PASSWORD,\r\n  database: process.env.MYSQL_DATABASE,\r\n});\r\n\r\n// Middleware para procesar cookies\r\napp.use(cookieParser());\r\n\r\n// Configurar middleware para manejar sesiones\r\napp.use(session({\r\n  secret: process.env.ACCESS_TOKEN_SECRET,\r\n  resave: false,\r\n  saveUninitialized: false,\r\n  store: sessionStore,\r\n}));\r\n\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\napp.use((err, req, res, next) => {\r\n  console.error(err.stack);\r\n  res.status(500).send('Algo salió mal');\r\n});\r\n\r\n// --------------------------------------------------------------------\r\n\r\n// Passport.js\r\n\r\n\r\n\r\n// Configurar estrategia de autenticación local\r\npassport.use(new LocalStrategy(\r\n  async (username, password, done) => {\r\n    try {\r\n      const user = await usuarios.obtenerPorNombre(username);\r\n      if (!user) {\r\n        return done(null, false, { message: 'Usuario incorrecto.' });\r\n      }\r\n      const passwordMatch = await authMiddleware.comparePassword(password, user.contraseña);\r\n      if (!passwordMatch) {\r\n        return done(null, false, { message: 'Contraseña incorrecta.' });\r\n      }\r\n      return done(null, user);\r\n    } catch (err) {\r\n      return done(err);\r\n    }\r\n  }\r\n));\r\n\r\n\r\npassport.serializeUser((user, done) => {\r\n  done(null, user.id);\r\n});\r\n\r\npassport.deserializeUser(async (id, done) => {\r\n  await usuarios.obtenerPorId(id).then((user) => {\r\n    done(null, user);\r\n  }).catch((error) => {\r\n    done(error, null);\r\n  });\r\n});\r\n\r\n\r\n// --------------------------------------------------------------------\r\n\r\n// Rutas para las páginas\r\napp.use('/', router);\r\n\r\n// Configuración del motor de plantillas Pug\r\napp.set('view engine', 'pug');\r\napp.set('views', path.join(__dirname, 'views'));\r\n\r\n// Configurar Multer para manejar la carga de archivos en memoria\r\nconst storage = multer.memoryStorage();\r\nconst upload = multer({ storage });\r\n\r\n// Middleware para procesar datos de formulario con archivos\r\napp.use(upload.single('seleccionarImg'));\r\n\r\n// Ruta para manejar la solicitud POST del formulario de carga\r\napp.post('/convertir', conversionController.convertirImagen);\r\n\r\n// Puerto en el que escucha el servidor\r\nconst port = 3000;\r\napp.listen(port, () => {\r\n  console.log(`Servidor iniciado en http://localhost:${port}`);\r\n});\r\n"],"file":"server.dev.js"}