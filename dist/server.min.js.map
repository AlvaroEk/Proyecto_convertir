{"version":3,"sources":["server.js"],"names":["express","require","app","path","flash","session","LocalStrategy","Strategy","multer","router","MySQLStore","passport","conversionController","use","usuarios","extended","dotenv","host","process","env","MYSQL_HOST","port","user","MYSQL_USER","password","cookieParser","database","MYSQL_DATABASE","json","urlencoded","saveUninitialized","store","sessionStore","err","req","res","next","console","error","stack","resave","status","send","done","obtenerPorNombre","username","message","authMiddleware","comparePassword","contraseña","_context","t0","id","deserializeUser","regeneratorRuntime","async","_context2","prev","awrap","obtenerPorId","then","stop","passwordMatch","set","join","__dirname","storage","memoryStorage","upload","single","post","convertirImagen","listen","log","concat"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst app = express();\r\nconst session = require('express-session');\r\nconst path = require('path');\r\nconst router = require('./routes/routes');\r\nconst flash = require('connect-flash');\r\nconst conversionController = require('./controllers/conversionController'); \r\nconst LocalStrategy = require('passport-local').Strategy;\r\nconst usuarios = require('./models/usermodel');\r\nconst multer = require('multer');\r\nconst dotenv = require('dotenv');\r\nconst MySQLStore = require('express-mysql-session')(session);\r\nconst cookieParser = require('cookie-parser');\r\nconst passport = require('passport');\r\nconst authMiddleware = require('./middlewares/authMiddleware'); \r\n\r\n// Middleware para procesar archivos estáticos en la carpeta 'public'\r\napp.use(express.static('public'));\r\napp.use(express.json());\r\n\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\nconst sessionStore = new MySQLStore({\r\n  host: process.env.MYSQL_HOST,\r\n  port: process.env.MYSQL_PORT,\r\n  user: process.env.MYSQL_USER,\r\n  password: process.env.MYSQL_PASSWORD,\r\n  database: process.env.MYSQL_DATABASE,\r\n});\r\n\r\n// Middleware para procesar cookies\r\napp.use(cookieParser());\r\n\r\n// Configurar middleware para manejar sesiones\r\napp.use(session({\r\n  secret: process.env.ACCESS_TOKEN_SECRET,\r\n  resave: false,\r\n  saveUninitialized: false,\r\n  store: sessionStore,\r\n}));\r\n\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\napp.use((err, req, res, next) => {\r\n  console.error(err.stack);\r\n  res.status(500).send('Algo salió mal');\r\n});\r\n\r\n// Configurar connect-flash\r\napp.use(flash());\r\n\r\n// --------------------------------------------------------------------\r\n\r\n// Passport.js\r\n\r\n// Configurar estrategia de autenticación local\r\npassport.use(new LocalStrategy(\r\n  async (username, password, done) => {\r\n    try {\r\n      const user = await usuarios.obtenerPorNombre(username);\r\n      if (!user) {\r\n        return done(null, false, { message: 'Usuario incorrecto.' });\r\n      }\r\n      const passwordMatch = await authMiddleware.comparePassword(password, user.contraseña);\r\n      if (!passwordMatch) {\r\n        return done(null, false, { message: 'Contraseña incorrecta.' });\r\n      }\r\n      return done(null, user);\r\n    } catch (err) {\r\n      return done(err);\r\n    }\r\n  }\r\n));\r\n\r\n\r\npassport.serializeUser((user, done) => {\r\n  done(null, user.id);\r\n});\r\n\r\npassport.deserializeUser(async (id, done) => {\r\n  await usuarios.obtenerPorId(id).then((user) => {\r\n    done(null, user);\r\n  }).catch((error) => {\r\n    done(error, null);\r\n  });\r\n});\r\n\r\n\r\n// --------------------------------------------------------------------\r\n\r\n// Rutas para las páginas\r\napp.use('/', router);\r\n\r\n// Configuración del motor de plantillas Pug\r\napp.set('view engine', 'pug');\r\napp.set('views', path.join(__dirname, 'views'));\r\n\r\n// Configurar Multer para manejar la carga de archivos en memoria\r\nconst storage = multer.memoryStorage();\r\nconst upload = multer({ storage });\r\n\r\n// Middleware para procesar datos de formulario con archivos\r\napp.use(upload.single('seleccionarImg'));\r\n\r\n// Ruta para manejar la solicitud POST del formulario de carga\r\napp.post('/convertir', conversionController.convertirImagen);\r\n\r\n// Puerto en el que escucha el servidor\r\nconst port = 3000;\r\napp.listen(port, () => {\r\n  console.log(`Servidor iniciado en http://localhost:${port}`);\r\n});\r\n"]}