{"version":3,"sources":["server.js"],"names":["express","require","app","multer","conversionController","path","flash","LocalStrategy","Strategy","router","session","db","dotenv","use","secret","env","resave","saveUninitialized","store","SQLiteStore","table","passport","initialize","cookieParser","process","ACCESS_TOKEN_SECRET","obtenerUsuarioPorNombre","username","err","user","done","password","message","serializeUser","id","getUserById","req","res","next","locals","carrito","console","concat","method","url","error","stack","status","urlencoded","extended","set","join","__dirname","json","deserializeUser","storage","upload","single","post","convertirImagen","port","listen","log"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,IAAMF,UADNA,KAAOC,QAAU,QAGjBE,OAASF,QAAQ,UAFjBC,OAAMF,QAAZ,mBAIMI,qBAAuBH,QAAQ,sCAH/BI,QAAOJ,QAAQ,mBAKfK,MAAQL,QAAQ,iBAJhBE,SAASF,QAAQ,YAMjBM,cAAgBN,QAAQ,kBAAkBO,SAL1CC,YAAgBR,QAAC,kBAADA,CAAoBS,SAOpCC,GAAKV,QAAQ,QACbW,OAASX,QAAQ,UAPjBG,aAAAA,QAAuBH,iBAC7BC,IAAMQ,IAAAA,gBACNE,OAAMN,SAcNJ,IAAIW,IAAIH,QAAQ,CAZhBI,OAAMP,QAAaQ,IAAGd,oBAcpBe,QAAQ,EAbVC,mBAAoBhB,EAelBiB,MAAO,IAAIC,YAAY,CAAER,GAAI,oBAAqBS,MAAO,gBAI3DlB,IAAIW,IAAIP,SAGRJ,IAAIW,IAAIQ,SAASC,cAhBjBpB,IAAIW,IAAIU,SAAAA,WAKRrB,SAAQQ,IAAAA,IAAQH,cACdO,SAAAA,EAAQU,EAAYC,GAAqBd,GAAAe,wBAAAC,EAAA,SAAAC,EAAAC,GACzCb,OAAQY,EAFME,EAAAF,GAGdX,EACOY,EAAIV,WAAYY,EAAAD,EAAA,MAAA,EAAA,CAAAE,QAAA,2BAAMF,EAAA,KAAAD,GAJfC,EAAA,MAAA,EAAA,CAAAE,QAAA,6BA0BhBX,SAASY,cAAc,SAACJ,EAAMC,GAlB9B5B,EAAA,KAAa2B,EAEbK,MAEAhC,SAAQmB,gBAAA,SAARa,EAEAJ,GAiBEnB,GAAGwB,YAAYD,EAAI,SAACN,EAAKC,GAhB3BR,EAASR,EAAIgB,OAGuB3B,IAAAW,IAAA,SAAAuB,EAAAC,EAAAC,GAmBlCD,EAAIE,OAAOC,QAAUJ,EAAI1B,QAAQ8B,SAAW,GAlBxCC,QAAKZ,IAAL,uBAAAa,OAAWN,EAAAO,OAAX,KAAAD,OAAWN,EAAAQ,MAAEN,MAA+DpC,IAAAW,IAAA,SAAAe,EAAAQ,EAAAC,EAAAC,GAwBhFG,QAAQI,MAAMjB,EAAIkB,OAvBdT,EAAAU,OAAShB,KAAAA,KAAL,oBAAuD7B,IAAAW,IAAzBb,QAAAgD,WAAA,CAAAC,UAAA,KAClC/C,IAAAgD,IAAA,cAAkBrB,OACnB3B,IALDgD,IAAA,QAAA7C,KAAA8C,KAAAC,UAAA,UAUFtB,IAAAA,IAAK9B,QAAM6B,OAAX,WACD3B,IAFDW,IAAAb,QAAAqD,QAIAhC,IAAAA,IAAQ,IAACiC,QAGNpD,IAFDW,IAAAb,QAAA,OAAA,WAMAqC,IAAIE,QAAOC,OAAUJ,gBACrBK,OAAAtC,OAAA,CAAAoD,QAAAA,UAIFrD,IAAIW,IAAI2C,OAAAC,OAAA,mBAGPvD,IAHDwD,KAAA,aAAAtD,qBAAAuD,iBAK2B,IAE3BC,KAAA,IAwBA1D,IAAI2D,OAAOD,KAAM,WAvBjB1D,QAAQ4D,IAAR5D,yCAAAA,OAAA0D","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst app = express();\r\nconst path = require('path');\r\nconst multer = require('multer');\r\nconst router = require('./routes/routes');// Importa el enrutador\r\nconst conversionController = require('./controllers/conversionController');// Importar el controlador de conversión\r\nconst session = require('express-session');\r\nconst flash = require('connect-flash');\r\nconst passport = require('passport');\r\nconst LocalStrategy = require('passport-local').Strategy;\r\nconst SQLiteStore = require('connect-sqlite3')(session);\r\nconst db = require('./db')\r\nconst dotenv = require('dotenv');\r\nconst cookieParser = require('cookie-parser');\r\n\r\n//Configura Cookie Parser\r\napp.use(cookieParser());\r\n\r\ndotenv.config();\r\n\r\n// Configurar middleware para manejar sesiones\r\napp.use(session({\r\n  secret: process.env.ACCESS_TOKEN_SECRET, // Clave secreta para firmar la cookie de sesión\r\n  resave: false,\r\n  saveUninitialized: false,\r\n  store: new SQLiteStore({ db: 'sessionsDB.sqlite', table: 'sessions' }) // Almacena las sesiones en una base de datos SQLite\r\n}));\r\n\r\n// Configura connect-flash\r\napp.use(flash());\r\n\r\n// Configurar Passport.js\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\n// Configurar estrategia de autenticación local\r\npassport.use(new LocalStrategy(\r\n  (username, password, done) => {\r\n    db.obtenerUsuarioPorNombre(username, (err, user) => {\r\n      if (err) { return done(err); }\r\n      if (!user) { return done(null, false, { message: 'Usuario incorrecto.' }); }\r\n      if (user.password !== password) { return done(null, false, { message: 'Contraseña incorrecta.' }); }\r\n      return done(null, user);\r\n    });\r\n  }\r\n));\r\n\r\npassport.serializeUser((user, done) => {\r\n  done(null, user.id);\r\n});\r\n\r\npassport.deserializeUser((id, done) => {\r\n  db.getUserById(id, (err, user) => {\r\n    done(err, user);\r\n  });\r\n});\r\n\r\napp.use((req, res, next) => {\r\n  res.locals.carrito = req.session.carrito || [];\r\n  console.log(`Solicitud recibida: ${req.method} ${req.url}`);\r\n  next();\r\n});\r\n\r\napp.use((err, req, res, next) => {\r\n  console.error(err.stack);\r\n  res.status(500).send('Algo salió mal');\r\n});\r\n\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// Configura el motor de vistas\r\napp.set('view engine', 'pug');\r\napp.set('views', path.join(__dirname, 'views'));\r\n\r\n// Middleware para procesar archivos estáticos en la carpeta 'public'\r\napp.use(express.static('public'));\r\napp.use(express.json());\r\napp.use('/', router);\r\n\r\n// Ruta para los estilos\r\napp.use(express.static('public'));\r\n\r\n// Configurar Multer para manejar la carga de archivos en memoria\r\nconst storage = multer.memoryStorage();\r\nconst upload = multer({ storage });\r\n\r\n// Middleware para procesar datos de formulario con archivos\r\napp.use(upload.single('seleccionarImg'));\r\n\r\n// Ruta para manejar la solicitud POST del formulario de carga\r\napp.post('/convertir', conversionController.convertirImagen);\r\n\r\n// Puerto del servidor\r\nconst port = 3000;\r\napp.listen(port, () => {\r\n  console.log(`Servidor iniciado en http://localhost:${port}`);\r\n});\r\n"]}