{"version":3,"sources":["db.js"],"names":["sqlite3","require","verbose","db","Database","serialize","run","obtenerPorId","id","Promise","resolve","reject","query","err","results","console","error","log","registrarUsuario","nombre","email","password","stmt","prepare","message","finalize","obtenerUsuarioPorNombre","callback","get","row","getUserById","module","exports"],"mappings":"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","sourcesContent":["const sqlite3 = require('sqlite3').verbose();\r\n\r\n// Crear conexi贸n a la base de datos\r\nconst db = new sqlite3.Database('database.sqlite');\r\n\r\n// Crear tabla de usuarios si no existe\r\ndb.serialize(() => {\r\n    db.run(`CREATE TABLE IF NOT EXISTS usuarios (\r\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n    nombre TEXT,\r\n    email TEXT UNIQUE,\r\n    password TEXT\r\n  )`);\r\n});\r\n\r\n//Funcion para obtener un producto por su id\r\nasync function obtenerPorId(id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.query(\r\n            'SELECT * FROM productos WHERE id = ?',\r\n            [id],\r\n            (err, results) => {\r\n                if (err) {\r\n                    console.error('Error al obtener el producto por ID:', err);\r\n                    reject(err);\r\n                } else {\r\n                    console.log('Producto obtenido correctamente:', results);\r\n                    resolve(results);\r\n                }\r\n            }\r\n        );\r\n    });\r\n}\r\n\r\n// Funci贸n para insertar un nuevo usuario en la base de datos\r\nfunction registrarUsuario(nombre, email, password) {\r\n    return new Promise((resolve, reject) => {\r\n        const stmt = db.prepare('INSERT INTO usuarios (nombre, email, password) VALUES (?, ?, ?)');\r\n        stmt.run(nombre, email, password, (err) => {\r\n            if (err) {\r\n                console.error(err.message);\r\n                reject(err);\r\n            } else {\r\n                console.log('Usuario insertado correctamente');\r\n                resolve();\r\n            }\r\n            stmt.finalize();\r\n        });\r\n    });\r\n}\r\n\r\n// Funci贸n para obtener un usuario por su email\r\nfunction obtenerUsuarioPorNombre(nombre, callback) {\r\n    db.get('SELECT * FROM usuarios WHERE nombre = ?', [nombre], (err, row) => {\r\n        if (err) {\r\n            console.error(err.message);\r\n            callback(err, null);\r\n        } else {\r\n            callback(null, row);\r\n        }\r\n    });\r\n}\r\n\r\n// Funci贸n para obtener un usuario por su ID\r\nfunction getUserById(id, callback) {\r\n    db.get('SELECT * FROM usuarios WHERE id = ?', [id], (err, row) => {\r\n        if (err) {\r\n            console.error(err.message);\r\n            callback(err, null);\r\n        } else {\r\n            callback(null, row);\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = {\r\n    registrarUsuario,\r\n    obtenerUsuarioPorNombre,\r\n    getUserById\r\n};"],"file":"db.dev.js"}