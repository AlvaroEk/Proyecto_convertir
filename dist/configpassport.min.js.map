{"version":3,"sources":["configpassport.js"],"names":["passport","require","LocalStrategy","Strategy","UserModel","comparePassword","nombre","contraseña","done","user","regeneratorRuntime","async","_context","prev","next","awrap","usuarios","obtenerPorNombre","sent","abrupt","message","authMiddleware","t0","stop","serializeUser","id","deserializeUser","_context2","obtenerPorId","then","error","module","exports"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,YACnBC,cAAgBD,QAAQ,kBAAkBE,kBADvBF,QAAzB,gCAAMD,yBAAAA,gBAGAI,UAAYH,QAAQ,sBAFpBC,SAAaE,UAMnBJ,SALQK,IAAAA,IAAAA,cAMN,SAAOC,EAAQC,EAAYC,GAA3B,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAEuBC,SAASC,iBAAiBX,IAFjD,KAAA,EAAA,GAEUG,EAFVG,EAAAM,KAAA,CAAAN,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAO,OAAA,SADWX,EAAIN,MAAAA,EACf,CAAAkB,QAAA,yBAAA,KAAA,EAAA,OAAAR,EAAAE,KAAA,EAAAJ,mBAAAK,MAAAM,eAAAhB,gBAAAE,EAAAE,EAAAF,aAAA,KAAA,EAAA,GAAAK,EAAAM,KAAA,CAAAN,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAO,OAAA,SAAAX,EAAA,MAAA,EAAA,CAAAY,QAAA,4BAAA,KAAA,GAAA,OAAAR,EAAAO,OAAA,SAAAX,EAAA,KAAAC,IAAA,KAAA,GAAA,OAAAG,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,MAAA,GAAAA,EAAAO,OAAA,SAAAX,EAAAI,EAAAU,KAAA,KAAA,GAAA,IAAA,MAAA,OAAAV,EAAAW,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,SAAAvB,SAAAwB,cAAA,SAAAf,EAAAD,GAAAA,EAAA,KAAAC,EAAAgB,MAqBFzB,SAAS0B,gBAAgB,SAAOD,EAAIjB,GAAX,OAAAE,mBAAAC,MAAA,SAAAgB,GAAA,OAAA,OAAAA,EAAAd,KAAAc,EAAAb,MAAA,KAAA,EAAA,OAAAa,EAAAb,KAAA,EAAAJ,mBAAAK,MArBvBC,SAAAY,aAAAH,GAAAI,KAAA,SAAApB,GAIiCW,EAAAA,KAAAA,KAJjC,MAIiB,SAJjBU,GAyBEtB,EAAKsB,EAAO,SAJS,KAAA,EAAA,IAAA,MAAA,OAAAH,EAAAJ,YAQzBQ,OAAOC,QAAUhC","file":"configpassport.min.js","sourcesContent":["const passport = require('passport');\r\nconst LocalStrategy = require('passport-local').Strategy;\r\nconst { comparePassword } = require('./middlewares/authMiddleware');\r\nconst UserModel = require('./models/usermodel');\r\nconst usuarios = UserModel;\r\n\r\n\r\npassport.use(new LocalStrategy(\r\n  async (nombre, contraseña, done) => {\r\n    try {\r\n      const user = await usuarios.obtenerPorNombre(nombre);\r\n      if (!user) {\r\n        return done(null, false, { message: 'Usuario incorrecto.' });\r\n      }\r\n      const passwordMatch = await authMiddleware.comparePassword(contraseña, user.contraseña);\r\n      if (!passwordMatch) {\r\n        return done(null, false, { message: 'Contraseña incorrecta.' });\r\n      }\r\n      return done(null, user);\r\n    } catch (err) {\r\n      return done(err);\r\n    }\r\n  }\r\n));\r\n\r\npassport.serializeUser((user, done) => {\r\n  done(null, user.id);\r\n});\r\n\r\npassport.deserializeUser(async (id, done) => {\r\n  await usuarios.obtenerPorId(id).then((user) => {\r\n    done(null, user);\r\n  }).catch((error) => {\r\n    done(error, null);\r\n  });\r\n});\r\n\r\nmodule.exports = passport;\r\n"]}