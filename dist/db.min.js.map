{"version":3,"sources":["db.js"],"names":["sqlite3","require","verbose","db","Database","obtenerPorId","id","regeneratorRuntime","async","_context","prev","next","abrupt","query","resolve","reject","console","err","results","log","stop","registrarUsuario","nombre","email","password","Promise","stmt","finalize","obtenerUsuarioPorNombre","callback","get","row","message","getUserById","error","serialize","module","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAAWC,UAG7BC,GAAK,IAAIH,QAAQI,SAAS,mBAahC,SAAAC,aAAAC,GAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAG,OAAA,SAEQT,IAAGU,QACC,SAAAC,EAAAC,GAGIZ,GAAAU,MACIG,uCACAD,CAAAA,GACH,SAAAE,EAHDC,GAIIF,GACAF,QAAQI,MAAR,uCAAAD,GACHF,EAAAE,KAZjBD,QAAAG,IAAA,mCAAAD,GAWoBJ,EAAQI,SAX5B,KAAA,EAAA,IAAA,MAAA,OAAAT,EAAAW,UAmBA,SAASC,iBAAiBC,EAAQC,EAAOC,GACrC,OAAO,IAAIC,QAAQ,SAACX,EAASC,GADjC,IAASM,EAAAA,GAAAA,QAAT,mEACIK,EAAWD,IAAAA,EAAQF,EAACT,EAASC,SAAAA,GACZZ,GACJmB,QAAQC,MAAOC,EAAAA,SACXT,EAAAE,KAEEA,QAAPE,IAAA,mCACGL,KAEHA,EAAOa,eAKtB,SAEDC,wBAAAN,EAAAO,GAEI1B,GAAG2B,IAAI,0CAA2C,CAACR,GAAS,SAACL,EAAKc,GAC1Dd,GAFHW,QAAAA,MAAAA,EAAAA,SACEC,EAAAZ,EAAA,OAECD,EAAcC,KAAIe,KAM7B,SAEDC,YAAA3B,EAAAuB,GAEI1B,GAAG2B,IAAI,sCAAuC,CAACxB,GAAK,SAACW,EAAKc,GAClDd,GAFHgB,QAATC,MAAyBL,EAAAA,SACdA,EAAAZ,EAAA,OAECD,EAAcC,KAAIe,KA7D9B7B,GAAGgC,UAAU,WAAVA,GAAAA,IAAAA,wJAkEEC,OAPDC,QAAA,CAQHhB,iBAAAA,iBAIGO,wBAAAA,wBAFJQ,YAAAA","file":"db.min.js","sourcesContent":["const sqlite3 = require('sqlite3').verbose();\r\n\r\n// Crear conexi贸n a la base de datos\r\nconst db = new sqlite3.Database('database.sqlite');\r\n\r\n// Crear tabla de usuarios si no existe\r\ndb.serialize(() => {\r\n    db.run(`CREATE TABLE IF NOT EXISTS usuarios (\r\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n    nombre TEXT,\r\n    email TEXT UNIQUE,\r\n    password TEXT\r\n  )`);\r\n});\r\n\r\n//Funcion para obtener un producto por su id\r\nasync function obtenerPorId(id) {\r\n    return new Promise((resolve, reject) => {\r\n        db.query(\r\n            'SELECT * FROM productos WHERE id = ?',\r\n            [id],\r\n            (err, results) => {\r\n                if (err) {\r\n                    console.error('Error al obtener el producto por ID:', err);\r\n                    reject(err);\r\n                } else {\r\n                    console.log('Producto obtenido correctamente:', results);\r\n                    resolve(results);\r\n                }\r\n            }\r\n        );\r\n    });\r\n}\r\n\r\n// Funci贸n para insertar un nuevo usuario en la base de datos\r\nfunction registrarUsuario(nombre, email, password) {\r\n    return new Promise((resolve, reject) => {\r\n        const stmt = db.prepare('INSERT INTO usuarios (nombre, email, password) VALUES (?, ?, ?)');\r\n        stmt.run(nombre, email, password, (err) => {\r\n            if (err) {\r\n                console.error(err.message);\r\n                reject(err);\r\n            } else {\r\n                console.log('Usuario insertado correctamente');\r\n                resolve();\r\n            }\r\n            stmt.finalize();\r\n        });\r\n    });\r\n}\r\n\r\n// Funci贸n para obtener un usuario por su email\r\nfunction obtenerUsuarioPorNombre(nombre, callback) {\r\n    db.get('SELECT * FROM usuarios WHERE nombre = ?', [nombre], (err, row) => {\r\n        if (err) {\r\n            console.error(err.message);\r\n            callback(err, null);\r\n        } else {\r\n            callback(null, row);\r\n        }\r\n    });\r\n}\r\n\r\n// Funci贸n para obtener un usuario por su ID\r\nfunction getUserById(id, callback) {\r\n    db.get('SELECT * FROM usuarios WHERE id = ?', [id], (err, row) => {\r\n        if (err) {\r\n            console.error(err.message);\r\n            callback(err, null);\r\n        } else {\r\n            callback(null, row);\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = {\r\n    registrarUsuario,\r\n    obtenerUsuarioPorNombre,\r\n    getUserById\r\n};"]}