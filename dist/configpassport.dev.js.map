{"version":3,"sources":["configpassport.js"],"names":["passport","require","LocalStrategy","Strategy","comparePassword","UserModel","usuarios","use","nombre","contraseña","done","obtenerPorNombre","user","message","authMiddleware","passwordMatch","serializeUser","id","deserializeUser","obtenerPorId","then","error","module","exports"],"mappings":";;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,aAAa,GAAGD,OAAO,CAAC,gBAAD,CAAP,CAA0BE,QAAhD;;eAC4BF,OAAO,CAAC,8BAAD,C;IAA3BG,e,YAAAA,e;;AACR,IAAMC,SAAS,GAAGJ,OAAO,CAAC,oBAAD,CAAzB;;AACA,IAAMK,QAAQ,GAAGD,SAAjB;AAGAL,QAAQ,CAACO,GAAT,CAAa,IAAIL,aAAJ,CACX,iBAAOM,MAAP,EAAeC,UAAf,EAA2BC,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEuBJ,QAAQ,CAACK,gBAAT,CAA0BH,MAA1B,CAFvB;;AAAA;AAEUI,UAAAA,IAFV;;AAAA,cAGSA,IAHT;AAAA;AAAA;AAAA;;AAAA,2CAIaF,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEG,YAAAA,OAAO,EAAE;AAAX,WAAd,CAJjB;;AAAA;AAAA;AAAA,0CAMgCC,cAAc,CAACV,eAAf,CAA+BK,UAA/B,EAA2CG,IAAI,CAACH,UAAhD,CANhC;;AAAA;AAMUM,UAAAA,aANV;;AAAA,cAOSA,aAPT;AAAA;AAAA;AAAA;;AAAA,2CAQaL,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEG,YAAAA,OAAO,EAAE;AAAX,WAAd,CARjB;;AAAA;AAAA,2CAUWH,IAAI,CAAC,IAAD,EAAOE,IAAP,CAVf;;AAAA;AAAA;AAAA;AAAA,2CAYWF,IAAI,aAZf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CADW,CAAb;AAkBAV,QAAQ,CAACgB,aAAT,CAAuB,UAACJ,IAAD,EAAOF,IAAP,EAAgB;AACrCA,EAAAA,IAAI,CAAC,IAAD,EAAOE,IAAI,CAACK,EAAZ,CAAJ;AACD,CAFD;AAIAjB,QAAQ,CAACkB,eAAT,CAAyB,kBAAOD,EAAP,EAAWP,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACjBJ,QAAQ,CAACa,YAAT,CAAsBF,EAAtB,EAA0BG,IAA1B,CAA+B,UAACR,IAAD,EAAU;AAC7CF,YAAAA,IAAI,CAAC,IAAD,EAAOE,IAAP,CAAJ;AACD,WAFK,WAEG,UAACS,KAAD,EAAW;AAClBX,YAAAA,IAAI,CAACW,KAAD,EAAQ,IAAR,CAAJ;AACD,WAJK,CADiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;AAQAC,MAAM,CAACC,OAAP,GAAiBvB,QAAjB","sourcesContent":["const passport = require('passport');\r\nconst LocalStrategy = require('passport-local').Strategy;\r\nconst { comparePassword } = require('./middlewares/authMiddleware');\r\nconst UserModel = require('./models/usermodel');\r\nconst usuarios = UserModel;\r\n\r\n\r\npassport.use(new LocalStrategy(\r\n  async (nombre, contraseña, done) => {\r\n    try {\r\n      const user = await usuarios.obtenerPorNombre(nombre);\r\n      if (!user) {\r\n        return done(null, false, { message: 'Usuario incorrecto.' });\r\n      }\r\n      const passwordMatch = await authMiddleware.comparePassword(contraseña, user.contraseña);\r\n      if (!passwordMatch) {\r\n        return done(null, false, { message: 'Contraseña incorrecta.' });\r\n      }\r\n      return done(null, user);\r\n    } catch (err) {\r\n      return done(err);\r\n    }\r\n  }\r\n));\r\n\r\npassport.serializeUser((user, done) => {\r\n  done(null, user.id);\r\n});\r\n\r\npassport.deserializeUser(async (id, done) => {\r\n  await usuarios.obtenerPorId(id).then((user) => {\r\n    done(null, user);\r\n  }).catch((error) => {\r\n    done(error, null);\r\n  });\r\n});\r\n\r\nmodule.exports = passport;\r\n"],"file":"configpassport.dev.js"}