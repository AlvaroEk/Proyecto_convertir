{"version":3,"sources":["usermodel.js"],"names":["require","obtenerConexion","registrar","nombre","email","password","conexion","regeneratorRuntime","async","_context","prev","next","awrap","sent","query","console","log","t0","error","release","finish","stop","obtenerPorNombre","_ref","_ref2","results","_context2","_slicedToArray","abrupt","obtenerPorId","id","_ref3","_ref4","_context3","module","exports"],"mappings":"goBAA4BA,QAAQ,yBAA5BC,yBAAAA,gBAER,SAAeC,UAAUC,EAAQC,EAAOC,GAAxC,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MAC2BX,mBAD3B,KAAA,EAAA,OACUK,EADVG,EAAAI,KAAAJ,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAGcN,EAASQ,MAAM,oEAAqE,CAACX,EAAQC,EAAOC,KAHlH,KAAA,EAIQU,QAAQC,IAAI,mCAJpBP,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAA,MAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,MAAA,GAMQM,QAAQG,MAAM,6BAAdT,EAAAQ,IANRR,EAAAQ,GAAA,KAAA,GAAA,OAAAR,EAAAC,KAAA,GAUQJ,EAASa,UAVjBV,EAAAW,OAAA,IAAA,KAAA,GAAA,IAAA,MAAA,OAAAX,EAAAY,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,EAAA,GAAA,MAAA,SAAAC,iBAAAnB,GAAA,IAAAG,EAAAiB,EAAAC,EAAAC,EAAA,OAAAlB,mBAAAC,MAAA,SAAAkB,GAAA,OAAA,OAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,KAAA,EAAA,OAAAe,EAAAf,KAAA,EAAAJ,mBAAAK,MAAAX,mBAAA,KAAA,EAAA,OAAAK,EAAAoB,EAAAb,KAAAa,EAAAhB,KAAA,EAAAgB,EAAAf,KAAA,EAAAJ,mBAAAK,MAAAN,EAAAQ,MAAA,0CAAA,CAAAX,KAAA,KAAA,EAAA,OAAAoB,EAAAG,EAAAb,KAAAW,EAAAG,eAAAJ,EAAA,GAAAE,EAAAD,EAAA,GAAAE,EAAAE,OAAA,SAAAH,EAAA,IAAA,KAAA,GAAA,MAAAC,EAAAhB,KAAA,GAAAgB,EAAAT,GAAAS,EAAA,MAAA,GAAAX,QAAAG,MAAA,uCAAAQ,EAAAT,IAAAS,EAAAT,GAAA,KAAA,GAAA,OAAAS,EAAAhB,KAAA,GAAAJ,EAAAa,UAAAO,EAAAN,OAAA,IAAA,KAAA,GAAA,IAAA,MAAA,OAAAM,EAAAL,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,MAAA,SAAAQ,aAAAC,GAAA,IAAAxB,EAAAyB,EAAAC,EAAAP,EAAA,OAAAlB,mBAAAC,MAAA,SAAAyB,GAAA,OAAA,OAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,KAAA,EAAA,OAAAsB,EAAAtB,KAAA,EAAAJ,mBAAAK,MAAAX,mBAAA,KAAA,EAAA,OAAAK,EAAA2B,EAAApB,KAAAoB,EAAAvB,KAAA,EAAAuB,EAAAtB,KAAA,EAAAJ,mBAAAK,MAAAN,EAAAQ,MAAA,sCAAA,CAAAgB,KAAA,KAAA,EAAA,OAAAC,EAAAE,EAAApB,KAAAmB,EAAAL,eAAAI,EAAA,GAAAN,EAAAO,EAAA,GAAAC,EAAAL,OAAA,SAAAH,EAAA,IAAA,KAAA,GAAA,MAAAQ,EAAAvB,KAAA,GAAAuB,EAAAhB,GAAAgB,EAAA,MAAA,GAMQlB,QAAAA,MAAQG,mCAARH,EAAAA,IANRkB,EAAAhB,GAAA,KAAA,GAAA,OAAAgB,EAAAvB,KAAA,GAAAJ,EAAAa,UAAAc,EAAAb,OAAA,IAAA,KAAA,GAAA,IAAA,MAAA,OAAAa,EAAAZ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,MA0CAa,OAAOC,QAAU,CA1CjBjC,UAAAA,UAAAoB,iBAAAA,iBAAAO,aAAAA","file":"usermodel.min.js","sourcesContent":["const { obtenerConexion } = require('../date_base/conexion');\r\n\r\nasync function registrar(nombre, email, password) {\r\n    const conexion = await obtenerConexion();\r\n    try {\r\n        await conexion.query('INSERT INTO usuarios (nombre, email, contrase침a) VALUES (?, ?, ?)', [nombre, email, password]);\r\n        console.log('Usuario insertado correctamente');\r\n    } catch (error) {\r\n        console.error('Error al insertar usuario:', error);\r\n        throw error;\r\n    } finally {\r\n        // Liberar la conexi칩n\r\n        conexion.release();\r\n    }\r\n}\r\n\r\nasync function obtenerPorNombre(nombre) {\r\n    const conexion = await obtenerConexion();\r\n    try {\r\n        const [results] = await conexion.query('SELECT * FROM usuarios WHERE nombre = ?', [nombre]);\r\n        return results[0];\r\n    } catch (error) {\r\n        console.error('Error al obtener usuario por nombre:', error);\r\n        throw error;\r\n    } finally {\r\n        // Liberar la conexi칩n\r\n        conexion.release();\r\n    }\r\n}\r\n\r\nasync function obtenerPorId(id) {\r\n    const conexion = await obtenerConexion();\r\n    try {\r\n        const [results] = await conexion.query('SELECT * FROM usuarios WHERE id = ?', [id]);\r\n        return results[0];\r\n    } catch (error) {\r\n        console.error('Error al obtener usuario por ID:', error);\r\n        throw error;\r\n    } finally {\r\n        // Liberar la conexi칩n\r\n        conexion.release();\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    registrar,\r\n    obtenerPorNombre,\r\n    obtenerPorId,\r\n};\r\n"]}