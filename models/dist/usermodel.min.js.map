{"version":3,"sources":["usermodel.js"],"names":["require","obtenerConexion","registrar","nombre","email","contraseña","conexion","regeneratorRuntime","async","_context","prev","next","awrap","sent","query","console","log","t0","error","stop","obtenerPorNombre","_ref","_ref2","results","_context2","_slicedToArray","abrupt","obtenerPorId","id","_ref3","_ref4","_context3","module","exports"],"mappings":"goBAA4BA,QAAQ,yBAA5BC,yBAAAA,gBAGR,SAAeC,UAAUC,EAAQC,EAAOC,GAAxC,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MAC2BX,mBAD3B,KAAA,EAAA,OACUK,EADVG,EAAAI,KAAAJ,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAGcN,EAASQ,MAAM,oEAAqE,CAACX,EAAQC,EAAOC,KAHlH,KAAA,EAIQU,QAAQC,IAAI,mCAJpBP,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAA,MAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,MAAA,GAMQM,QAAQG,MAAM,6BAAdT,EAAAQ,IANRR,EAAAQ,GAAA,KAAA,GAAA,IAAA,MAAA,OAAAR,EAAAU,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,KAAA,SAAAC,iBAAAjB,GAAA,IAAAG,EAAAe,EAAAC,EAAAC,EAAA,OAAAhB,mBAAAC,MAAA,SAAAgB,GAAA,OAAA,OAAAA,EAAAd,KAAAc,EAAAb,MAAA,KAAA,EAAA,OAAAa,EAAAb,KAAA,EAAAJ,mBAAAK,MAAAX,mBAAA,KAAA,EAAA,OAAAK,EAAAkB,EAAAX,KAAAW,EAAAd,KAAA,EAAAc,EAAAb,KAAA,EAAAJ,mBAAAK,MAAAN,EAAAQ,MAAA,0CAAA,CAAAX,KAAA,KAAA,EAAA,OAAAkB,EAAAG,EAAAX,KAAAS,EAAAG,eAAAJ,EAAA,GAAAE,EAAAD,EAAA,GAAAE,EAAAE,OAAA,SAAAH,EAAA,IAAA,KAAA,GAAA,MAAAC,EAAAd,KAAA,GAAAc,EAAAP,GAAAO,EAAA,MAAA,GAAAT,QAAAG,MAAA,uCAAAM,EAAAP,IAAAO,EAAAP,GAAA,KAAA,GAAA,IAAA,MAAA,OAAAO,EAAAL,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAyBA,SAAeQ,aAAaC,GAA5B,IAAAtB,EAAAuB,EAAAC,EAAAP,EAAA,OAAAhB,mBAAAC,MAAA,SAAAuB,GAAA,OAAA,OAAAA,EAAArB,KAAAqB,EAAApB,MAAA,KAAA,EAAA,OAAAoB,EAAApB,KAAA,EAAAJ,mBAAAK,MAzBAX,mBAyBA,KAAA,EAAA,OAzBAK,EAyBAyB,EAAAlB,KAAAkB,EAAArB,KAAA,EAAAqB,EAAApB,KAAA,EAAAJ,mBAAAK,MAzBAN,EAAAQ,MAAA,sCAAA,CAAAc,KAyBA,KAAA,EAAA,OAAAC,EAAAE,EAAAlB,KAAAiB,EAAAL,eAAAI,EAAA,GAzBAN,EAyBAO,EAAA,GAAAC,EAAAL,OAAA,SAzBAH,EAAA,IAyBA,KAAA,GAAA,MAAAQ,EAAArB,KAAA,GAAAqB,EAAAd,GAAAc,EAAA,MAAA,GAzBAhB,QAAAG,MAAA,mCAAAa,EAAAd,IAyBAc,EAAAd,GAAA,KAAA,GAAA,IAAA,MAAA,OAAAc,EAAAZ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAzBAa,OAAAC,QAAA,CAAA/B,UAAAA,UAAAkB,iBAAAA,iBAAAO,aAAAA","file":"usermodel.min.js","sourcesContent":["const { obtenerConexion } = require('../date_base/conexion');\r\n\r\n// Función para insertar un nuevo usuario en la base de datos MySQL usando la pool, osea quitando codigo innecesario ya que la pool se encarga de cargar y de liberar las conexiobnes cuando ya no se usan\r\nasync function registrar(nombre, email, contraseña) {\r\n    const conexion = await obtenerConexion();\r\n    try {\r\n        await conexion.query('INSERT INTO usuarios (nombre, email, contraseña) VALUES (?, ?, ?)', [nombre, email, contraseña]);\r\n        console.log('Usuario insertado correctamente');\r\n    } catch (error) {\r\n        console.error('Error al insertar usuario:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Función para obtener un usuario por su nombre de usuario\r\nasync function obtenerPorNombre(nombre) {\r\n    const conexion = await obtenerConexion();\r\n    try {\r\n        const [results] = await conexion.query('SELECT * FROM usuarios WHERE nombre = ?', [nombre]);\r\n        return results[0];\r\n    } catch (error) {\r\n        console.error('Error al obtener usuario por nombre:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n// Función para obtener un usuario por su ID\r\nasync function obtenerPorId(id) {\r\n    const conexion = await obtenerConexion();\r\n    try {\r\n        const [results] = await conexion.query('SELECT * FROM usuarios WHERE id = ?', [id]);\r\n        return results[0];\r\n    } catch (error) {\r\n        console.error('Error al obtener usuario por ID:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    registrar,\r\n    obtenerPorNombre,\r\n    obtenerPorId,\r\n};"]}