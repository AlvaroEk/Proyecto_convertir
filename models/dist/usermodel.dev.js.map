{"version":3,"sources":["usermodel.js"],"names":["require","obtenerConexion","registrar","nombre","email","contraseña","conexion","query","console","log","error","obtenerPorNombre","results","obtenerPorId","id","module","exports"],"mappings":";;;;;;;;;;eAA4BA,OAAO,CAAC,uBAAD,C;IAA3BC,e,YAAAA,e,EAER;;;AACA,SAAeC,SAAf,CAAyBC,MAAzB,EAAiCC,KAAjC,EAAwCC,UAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAC2BJ,eAAe,EAD1C;;AAAA;AACUK,UAAAA,QADV;AAAA;AAAA;AAAA,0CAGcA,QAAQ,CAACC,KAAT,CAAe,mEAAf,EAAoF,CAACJ,MAAD,EAASC,KAAT,EAAgBC,UAAhB,CAApF,CAHd;;AAAA;AAIQG,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AAJR;AAAA;;AAAA;AAAA;AAAA;AAMQD,UAAAA,OAAO,CAACE,KAAR,CAAc,4BAAd;AANR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAWA;;;AACA,SAAeC,gBAAf,CAAgCR,MAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAC2BF,eAAe,EAD1C;;AAAA;AACUK,UAAAA,QADV;AAAA;AAAA;AAAA,0CAGgCA,QAAQ,CAACC,KAAT,CAAe,yCAAf,EAA0D,CAACJ,MAAD,CAA1D,CAHhC;;AAAA;AAAA;AAAA;AAGeS,UAAAA,OAHf;AAAA,4CAIeA,OAAO,CAAC,CAAD,CAJtB;;AAAA;AAAA;AAAA;AAMQJ,UAAAA,OAAO,CAACE,KAAR,CAAc,sCAAd;AANR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAYA;;;AACA,SAAeG,YAAf,CAA4BC,EAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAC2Bb,eAAe,EAD1C;;AAAA;AACUK,UAAAA,QADV;AAAA;AAAA;AAAA,0CAGgCA,QAAQ,CAACC,KAAT,CAAe,qCAAf,EAAsD,CAACO,EAAD,CAAtD,CAHhC;;AAAA;AAAA;AAAA;AAGeF,UAAAA,OAHf;AAAA,4CAIeA,OAAO,CAAC,CAAD,CAJtB;;AAAA;AAAA;AAAA;AAMQJ,UAAAA,OAAO,CAACE,KAAR,CAAc,kCAAd;AANR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaAK,MAAM,CAACC,OAAP,GAAiB;AACbd,EAAAA,SAAS,EAATA,SADa;AAEbS,EAAAA,gBAAgB,EAAhBA,gBAFa;AAGbE,EAAAA,YAAY,EAAZA;AAHa,CAAjB","sourcesContent":["const { obtenerConexion } = require('../date_base/conexion');\r\n\r\n// Función para insertar un nuevo usuario en la base de datos MySQL usando la pool, osea quitando codigo innecesario ya que la pool se encarga de cargar y de liberar las conexiobnes cuando ya no se usan\r\nasync function registrar(nombre, email, contraseña) {\r\n    const conexion = await obtenerConexion();\r\n    try {\r\n        await conexion.query('INSERT INTO usuarios (nombre, email, contraseña) VALUES (?, ?, ?)', [nombre, email, contraseña]);\r\n        console.log('Usuario insertado correctamente');\r\n    } catch (error) {\r\n        console.error('Error al insertar usuario:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Función para obtener un usuario por su nombre de usuario\r\nasync function obtenerPorNombre(nombre) {\r\n    const conexion = await obtenerConexion();\r\n    try {\r\n        const [results] = await conexion.query('SELECT * FROM usuarios WHERE nombre = ?', [nombre]);\r\n        return results[0];\r\n    } catch (error) {\r\n        console.error('Error al obtener usuario por nombre:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n// Función para obtener un usuario por su ID\r\nasync function obtenerPorId(id) {\r\n    const conexion = await obtenerConexion();\r\n    try {\r\n        const [results] = await conexion.query('SELECT * FROM usuarios WHERE id = ?', [id]);\r\n        return results[0];\r\n    } catch (error) {\r\n        console.error('Error al obtener usuario por ID:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    registrar,\r\n    obtenerPorNombre,\r\n    obtenerPorId,\r\n};"],"file":"usermodel.dev.js"}