{"version":3,"sources":["conversionController.js"],"names":["sharp","require","exports","req","res","formatoDestino","imagenConvertida","regeneratorRuntime","async","_context","prev","next","file","mimetype","startsWith","abrupt","status","send","body","opciones","awrap","buffer","toFormat","toBuffer","sent","set","Content-Type","concat","t0","console","error","stop"],"mappings":"aAAA,IAAMA,MAAQC,QAAQ,SAAtBC,QAAMF,gBAAgB,SAAtBG,EAAAC,GAAsB,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAF,EAAAC,KAAA,EAEIP,EAAAS,MAAAT,EAAAS,KAAAC,SAAAC,WAAA,cAFJ,CAAAL,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAM,OAAA,SAEIX,EAAAY,OAAA,KAAAC,KAAA,mDAFJ,KAAA,EAAA,OAEIZ,EAAA,MASI,SAAtBF,EAAIe,KAAKC,WATSd,EAGbO,QALSH,EAAAE,KAAA,EAAAJ,mBAAAa,MAgBapB,MAAMG,EAAIS,KAAKS,QAAQC,SAASjB,GAAgBkB,YAhB7D,KAAA,EAgBZjB,EAhBYG,EAAAe,KAEIpB,EAAAqB,IAAA,CAOtBC,eAAA,SAAAC,OAAAtB,GACIA,sBAAAA,2CAAAA,OAAwBA,EAAxBA,OAGHD,EAAAa,KAEDX,GAfkBG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAmB,GAAAnB,EAAA,MAAA,GA2BlBoB,QAAQC,MAAM,gCAAdrB,EAAAmB,IAzBsBxB,EAAAY,OAAA,KAAAC,KAAA,8BAFJ,KAAA,GAAA,IAAA,MAAA,OAAAR,EAAAsB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"conversionController.min.js","sourcesContent":["const sharp = require('sharp');\r\n\r\nexports.convertirImagen = async (req, res) => {\r\n  try {\r\n    // Verificar si se ha proporcionado un archivo y si es una imagen\r\n    if (!req.file || !req.file.mimetype.startsWith('image/jpeg')) {\r\n      return res.status(400).send('El archivo cargado no es una imagen JPG v√°lida');\r\n    }\r\n\r\n    // Determinar el formato al que se debe convertir\r\n    let formatoDestino = 'png'; // Predeterminado a PNG\r\n    if (req.body.opciones === 'JPEG') {\r\n      formatoDestino = 'jpeg';\r\n    }\r\n\r\n    // Convertir la imagen de JPG al formato seleccionado\r\n    const imagenConvertida = await sharp(req.file.buffer).toFormat(formatoDestino).toBuffer();\r\n\r\n    // Configurar el encabezado Content-Disposition para que el navegador descargue la imagen\r\n    res.set({\r\n      'Content-Type': `image/${formatoDestino}`, // Tipo de contenido de salida: PNG o JPEG\r\n      'Content-Disposition': `attachment; filename=\"imagen_convertida.${formatoDestino}\"`, // Nombre del archivo a descargar\r\n    });\r\n\r\n    // Enviar la imagen convertida al cliente\r\n    res.send(imagenConvertida);\r\n  } catch (error) {\r\n    console.error('Error al convertir la imagen:', error);\r\n    res.status(500).send('Error interno del servidor');\r\n  }\r\n};\r\n"]}