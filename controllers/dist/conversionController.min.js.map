{"version":3,"sources":["conversionController.js"],"names":["sharp","require","create","exports","convertirImagen","req","res","imagenConvertida","formatoDestino","opciones","canvas","imageData","regeneratorRuntime","async","_context","prev","next","file","abrupt","status","send","body","toUpperCase","size","awrap","toBuffer","sent","image","svg","set","buffer","toFormat","Content-Type","concat","t0","stop"],"mappings":"aAAA,IAAMA,MAAQC,QAAQ,kBACHA,QAAQ,oBAAnBC,gBAAAA,OAERC,QAAQC,gBAAkB,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAF,EAAAC,KAAA,EAGjBV,EAAIY,KAHa,CAAAH,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAI,OAAA,SAIbZ,EAAIa,OAAO,KAAKC,KAAK,0CAJR,KAAA,EAAA,GAAAZ,EAAA,MAAAH,EAAAgB,KAAAZ,WAYH,UAZGA,EAAAJ,EAAAgB,KAAAZ,SAAAa,eAAAd,EAAA,OAAA,QAAAC,IAAAD,EAAA,QAmBI,QAAtBH,EAAIgB,KAAKZ,SAnBS,OAQlBD,EAAAA,SAAiBe,KAAO,IAAA,KARNT,EAAAE,KAAA,EAAAJ,mBAAAY,MAWCH,MAAKZ,EAATQ,KAAkBK,QAAlBG,YAXGX,EAAAE,KAAA,GAAA,MAAA,KAAA,EAWdP,EAXcK,EAAAY,KAyBpBhB,EAAOiB,MAAMhB,GAAWY,KAAK,IAAK,KAXjChB,EAAUE,EAAQmB,MAGpBtB,EAAAuB,IAAA,eAAA,iBAjBqBf,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAE,KAAA,GAAAJ,mBAAAY,MAAAxB,MAAAK,EAAAY,KAAAa,QAAAC,SAAAvB,GAAAiB,YAAA,KAAA,GAAAlB,EAAAO,EAAAY,KAqCpBpB,EAAIuB,IAAI,CAjBRG,eAAA,SAAAC,OAAAzB,GACME,sBAAAA,2CAAAA,OAENF,EAFME,OArBc,KAAA,GAAAJ,EAAAc,KAAAb,GAAAO,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAoB,GAAApB,EAAA,MAAA,GAyBpBJ,QAAAA,MAAOiB,gCAAPjB,EAAAA,IAsBFJ,EAAIa,OAAO,KAAKC,KAAK,8BA/CC,KAAA,GAAA,IAAA,MAAA,OAAAN,EAAAqB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"conversionController.min.js","sourcesContent":["const sharp = require('sharp');\r\nconst { create } = require('@svgdotjs/svg.js'); // Importa 'create' desde svg.js\r\n\r\nexports.convertirImagen = async (req, res) => {\r\n  try {\r\n    // Verificar si se ha proporcionado un archivo y si es una imagen\r\n    if (!req.file) {\r\n      return res.status(400).send('No se ha proporcionado ningún archivo');\r\n    }\r\n\r\n    let imagenConvertida;\r\n    let formatoDestino = 'PNG'; // Predeterminado a PNG\r\n    \r\n    if (req.body.opciones) {\r\n      const opciones = req.body.opciones.toUpperCase();\r\n      if (opciones === 'JPEG') {\r\n        formatoDestino = 'jpeg'; \r\n      } else if (opciones === 'JPG') {\r\n        formatoDestino = 'jpg'; \r\n      }\r\n    }\r\n\r\n    if (req.body.opciones === 'SVG') {\r\n      // Crea un lienzo SVG\r\n      const canvas = create().size(500, 500);\r\n\r\n      // Agrega la imagen al lienzo SVG\r\n      const imageData = await sharp(req.file.buffer).toBuffer();\r\n      canvas.image(imageData).size(500, 500);\r\n\r\n      // Obtén el SVG como una cadena\r\n      imagenConvertida = canvas.svg();\r\n\r\n      // Configura el encabezado Content-Type para la respuesta\r\n      res.set('Content-Type', 'image/svg+xml');\r\n    } else {\r\n      // Convertir la imagen al formato seleccionado\r\n      imagenConvertida = await sharp(req.file.buffer).toFormat(formatoDestino).toBuffer();\r\n\r\n      // Configurar el encabezado Content-Disposition para que el navegador descargue la imagen\r\n      res.set({\r\n        'Content-Type': `image/${formatoDestino}`, // Tipo de contenido de salida: PNG o JPEG\r\n        'Content-Disposition': `attachment; filename=\"imagen_convertida.${formatoDestino}\"`, // Nombre del archivo a descargar\r\n      });\r\n    }\r\n\r\n    // Enviar la imagen convertida al cliente\r\n    res.send(imagenConvertida);\r\n  } catch (error) {\r\n    console.error('Error al convertir la imagen:', error);\r\n    res.status(500).send('Error interno del servidor');\r\n  }\r\n};\r\n"]}