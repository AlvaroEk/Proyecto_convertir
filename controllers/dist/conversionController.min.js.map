{"version":3,"sources":["conversionController.js"],"names":["sharp","require","potrace","req","res","formatoDestino","opciones","buffer","conversionesRealizadas","regeneratorRuntime","async","_context","prev","next","insertarRegistro","abrupt","status","send","body","toUpperCase","toLowerCase","awrap","file","toBuffer","sent","trace","threshold","err","svg","toFormat","originalname","concat","session","isAuthenticated","redirect","set","Content-Type","Content-Disposition","t0","console","error","stop","convertirImagen"],"mappings":"aAAA,IAAMA,MAAQC,QAAQ,SAChBC,QAAUD,QAAQ,oBADxBA,QAAA,0BAAMD,0BAAAA,iBACN,SAAgBC,gBAAOE,EAAvBC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAF,EAAAC,KAAA,EACQE,EAAAA,KADR,CAAAH,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAI,OAAA,SAOaX,EAAIY,OAAO,KAAKC,KAAK,0CAPlC,KAAA,EAAA,GAGAZ,EAAA,MAAAF,EAAAe,KAAAZ,WAAA,UAAAA,EAAAH,EAAAe,KAAAZ,SAAAa,eAYQd,EAAiB,OAZzB,QAGYC,EAHZD,EAAA,MAAA,QAAAC,GAAA,QAAAA,GAAA,SAAAA,IAAAD,EAAAC,EAAAc,gBAsB2B,QAAnBf,EAzBR,OAAAM,EAAAE,KAAA,EAAAJ,mBAAAY,MAYYH,MAAKZ,EAAbgB,KAAuBf,QAAAgB,YAZ3BZ,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAA,OAYIN,EAZJI,EAAAa,KAAAb,EAAAE,KAAA,GAAAJ,mBAAAY,MAY2B,IACJlB,QAASG,SAAAA,EAASa,GAejCjB,QAAQuB,MAAMlB,EAAQ,CAAEmB,UAAW,KAAO,SAACC,EAAKC,GAdlDD,EACEtB,EAAAA,GAEAA,EAAAA,QAjBR,KAAA,GAaYC,EAbZK,EAAAa,KAAAb,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAE,KAAA,GAAAJ,mBAAAY,MAqCqBrB,MAAMG,EAAImB,KAAKf,QAAQsB,SAASxB,GAAgBkB,YArCrE,KAAA,GAqCMhB,EArCNI,EAAAa,KAAA,KAAA,GAAA,OAAAb,EAAAE,KAAA,GAAAJ,mBAAAY,MAGAP,iBAAAX,EAAAmB,KAAAQ,aAAA,qBAAAC,OAAA1B,GAAAA,IAHA,KAAA,GAAA,GAGAG,EAAAL,EAAA6B,QAAAxB,wBAAA,EA2CSL,EAAI8B,kBA9Cb,CAAAtB,EAAAE,KAAA,GAAA,MAAA,KA0BMN,EAvBN,GAHA,CAAAI,EAAAE,KAAA,GAAA,MAGAL,IAAAL,EAAA6B,QAAAxB,uBAwBqBA,EA3BrBG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAI,OAAA,SA4BkDX,EAAA8B,SAAA,WA5BlD,KAAA,GAiCW9B,EAAA+B,IAAA,CACFC,eAAA,SAAAL,OAND1B,GAODgC,sBAAA,2CAAAN,OAhCP1B,EAgCO,OAhCPD,EAAAa,KAAAV,GAHAI,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAA2B,GAAA3B,EAAA,MAAA,GAGA4B,QAAAC,MAAA,gCAAA7B,EAAA2B,IAAAlC,EAAAY,OAAA,KAAAC,KAAA,8BAHA,KAAA,GAAA,IAAA,MAAA,OAAAN,EAAA8B,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAqCMlC,OAAAA,QAlCN,CAsEEmC,gBAAAA","file":"conversionController.min.js","sourcesContent":["const sharp = require('sharp');\r\nconst potrace = require('potrace');\r\nconst { insertarRegistro } = require('../models/historymodel');\r\n\r\nasync function convertirImagen(req, res) {\r\n  try {\r\n    // Verificar si se ha proporcionado un archivo y si es una imagen\r\n    if (!req.file) {\r\n      return res.status(400).send('No se ha proporcionado ningún archivo');\r\n    }\r\n\r\n    let formatoDestino = 'png'; // Predeterminado a PNG\r\n\r\n    if (req.body.opciones) {\r\n      const opciones = req.body.opciones.toUpperCase();\r\n      if (opciones === 'JPEG') {\r\n        formatoDestino = 'jpeg'; \r\n      } else if (opciones === 'JPG') {\r\n        formatoDestino = 'jpg'; \r\n      } else if (opciones === 'SVG' || opciones === 'PNG' || opciones === 'WEBP') {\r\n        formatoDestino = opciones.toLowerCase(); \r\n      }\r\n    }\r\n\r\n    // Convertir la imagen a formato destino\r\n    let buffer;\r\n    if (formatoDestino === 'svg') {\r\n      buffer = await sharp(req.file.buffer).toBuffer();\r\n      buffer = await new Promise((resolve, reject) => {\r\n        potrace.trace(buffer, { threshold: 128 }, (err, svg) => {\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            resolve(svg);\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      buffer = await sharp(req.file.buffer).toFormat(formatoDestino).toBuffer();\r\n    }\r\n    \r\n\r\n    // Insertar un registro en la base de datos\r\n    await insertarRegistro(req.file.originalname, `imagen_convertida.${formatoDestino}`, formatoDestino);\r\n\r\n    let conversionesRealizadas = req.session.conversionesRealizadas || 0;\r\n\r\n    if (!req.isAuthenticated()) {\r\n      // Si el usuario no está autenticado, verificar el límite de conversiones\r\n      if (conversionesRealizadas < 3) {\r\n        conversionesRealizadas++;\r\n        req.session.conversionesRealizadas = conversionesRealizadas;\r\n      } else {\r\n        // Si el usuario ha realizado tres conversiones y no está autenticado, redirigir al usuario al inicio de sesión\r\n        return res.redirect('/login');\r\n      }\r\n    }\r\n\r\n    // Configurar el encabezado Content-Disposition para que el navegador descargue la imagen\r\n    res.set({\r\n      'Content-Type': `image/${formatoDestino}`, // Tipo de contenido de salida: PNG, JPEG, SVG, WEBP\r\n      'Content-Disposition': `attachment; filename=\"imagen_convertida.${formatoDestino}\"`, // Nombre del archivo a descargar\r\n    });\r\n\r\n    // Enviar la imagen convertida al cliente\r\n    res.send(buffer);\r\n    \r\n  } catch (error) {\r\n    console.error('Error al convertir la imagen:', error);\r\n    res.status(500).send('Error interno del servidor');\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  convertirImagen,\r\n};\r\n"]}