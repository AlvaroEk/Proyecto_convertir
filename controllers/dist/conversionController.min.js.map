{"version":3,"sources":["conversionController.js"],"names":["sharp","require","potrace","req","res","formatoDestino","opciones","buffer","regeneratorRuntime","async","_context","prev","next","insertarRegistro","abrupt","status","send","body","toUpperCase","toLowerCase","awrap","file","toBuffer","sent","trace","threshold","err","svg","toFormat","originalname","concat","set","Content-Type","Content-Disposition","t0","stop","resolve","convertirImagen"],"mappings":"aAAA,IAAMA,MAAQC,QAAQ,SAChBC,QAAUD,QAAQ,oBADxBA,QAAA,0BAAMD,0BAAAA,iBACN,SAAgBC,gBAAOE,EAAvBC,GAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAF,EAAAC,KAAA,EACQE,EAAAA,KADR,CAAAH,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAI,OAAA,SAOaV,EAAIW,OAAO,KAAKC,KAAK,0CAPlC,KAAA,EAAA,GAGAX,EAAA,MAAAF,EAAAc,KAAAX,WAAA,UAAAA,EAAAH,EAAAc,KAAAX,SAAAY,eAYQb,EAAiB,OAZzB,QAGYC,EAHZD,EAAA,MAAA,QAAAC,GAAA,QAAAA,GAAA,SAAAA,IAAAD,EAAAC,EAAAa,gBAsB2B,QAAnBd,EAzBR,OAAAK,EAAAE,KAAA,EAAAJ,mBAAAY,MAYYH,MAAKX,EAAbe,KAAuBd,QAAAe,YAZ3BZ,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAA,OAYIL,EAZJG,EAAAa,KAAAb,EAAAE,KAAA,GAAAJ,mBAAAY,MAY2B,IACJjB,QAASG,SAAAA,EAASY,GAejChB,QAAQsB,MAAMjB,EAAQ,CAAEkB,UAAW,KAAO,SAACC,EAAKC,GAdlDD,EACErB,EAAAA,GAEAA,EAAAA,QAjBR,KAAA,GAaYC,EAbZI,EAAAa,KAAAb,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAE,KAAA,GAAAJ,mBAAAY,MAqCqBpB,MAAMG,EAAIkB,KAAKd,QAAQqB,SAASvB,GAAgBiB,YArCrE,KAAA,GAqCMf,EArCNG,EAAAa,KAAA,KAAA,GAAA,OAAAb,EAAAE,KAAA,GAAAJ,mBAAAY,MAGAP,iBAAAV,EAAAkB,KAAAQ,aAAA,qBAAAC,OAAAzB,GAAAA,IAHA,KAAA,GAGAD,EAAA2B,IAAA,CAAAC,eAAA,SAAAF,OAAAzB,GA2CM4B,sBAAA,2CAAAH,OAAkEzB,EAAlE,OA3CND,EAAAY,KAAAT,GAHAG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,MAAA,GA4BgCe,QAAAA,MAAAA,gCAAAA,EAAAA,IAAFrB,EAAAW,OAAoB,KAAAC,KAACU,8BA5BnD,KAAA,GAAA,IAAA,MAAA,OAAAhB,EAAAyB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAgCYC,OAAAA,QAAAA,CACDC,gBAAAA","file":"conversionController.min.js","sourcesContent":["const sharp = require('sharp');\r\nconst potrace = require('potrace');\r\nconst { insertarRegistro } = require('../models/historymodel');\r\n\r\nasync function convertirImagen(req, res) {\r\n  try {\r\n    // Verificar si se ha proporcionado un archivo y si es una imagen\r\n    if (!req.file) {\r\n      return res.status(400).send('No se ha proporcionado ningÃºn archivo');\r\n    }\r\n\r\n    let formatoDestino = 'png'; // Predeterminado a PNG\r\n\r\n    if (req.body.opciones) {\r\n      const opciones = req.body.opciones.toUpperCase();\r\n      if (opciones === 'JPEG') {\r\n        formatoDestino = 'jpeg'; \r\n      } else if (opciones === 'JPG') {\r\n        formatoDestino = 'jpg'; \r\n      } else if (opciones === 'SVG' || opciones === 'PNG' || opciones === 'WEBP') {\r\n        formatoDestino = opciones.toLowerCase(); \r\n      }\r\n    }\r\n\r\n    // Convertir la imagen a formato destino\r\n    let buffer;\r\n    if (formatoDestino === 'svg') {\r\n      buffer = await sharp(req.file.buffer).toBuffer();\r\n      buffer = await new Promise((resolve, reject) => {\r\n        potrace.trace(buffer, { threshold: 128 }, (err, svg) => {\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            resolve(svg);\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      buffer = await sharp(req.file.buffer).toFormat(formatoDestino).toBuffer();\r\n    }\r\n\r\n    // Insertar un registro en la base de datos\r\n    await insertarRegistro(req.file.originalname, `imagen_convertida.${formatoDestino}`, formatoDestino);\r\n\r\n    // Configurar el encabezado Content-Disposition para que el navegador descargue la imagen\r\n    res.set({\r\n      'Content-Type': `image/${formatoDestino}`, // Tipo de contenido de salida: PNG, JPEG, SVG, WEBP\r\n      'Content-Disposition': `attachment; filename=\"imagen_convertida.${formatoDestino}\"`, // Nombre del archivo a descargar\r\n    });\r\n\r\n    // Enviar la imagen convertida al cliente\r\n    res.send(buffer);\r\n  } catch (error) {\r\n    console.error('Error al convertir la imagen:', error);\r\n    res.status(500).send('Error interno del servidor');\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  convertirImagen,\r\n};\r\n"]}