{"version":3,"sources":["userController.js"],"names":["usuarioModel","require","authMiddleWare","registrarUsuario","req","res","body","nombre","email","password","confirmPassword","status","send","obtenerPorNombre","usuarioExistente","getHash","hashedPassword","registrar","redirect","console","log","error","message","obtenerUsuarioPorNombre","params","usuario","json","obtenerUsuarioPorId","id","obtenerPorId","module","exports"],"mappings":"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","sourcesContent":["const usuarioModel = require('../models/usermodel');\r\nconst authMiddleWare = require('../middlewares/authMiddleware');\r\n\r\nasync function registrarUsuario(req, res) {\r\n    const { nombre, email, password, confirmPassword } = req.body;\r\n    try {\r\n        // Verificar si la contraseña y su confirmación coinciden\r\n        if (password !== confirmPassword) {\r\n            return res.status(400).send('Las contraseñas no coinciden');\r\n        }\r\n\r\n        // Verificar si el usuario ya está registrado\r\n        const usuarioExistente = await usuarioModel.obtenerPorNombre(nombre);\r\n        if (usuarioExistente) {\r\n            return res.status(400).send('El usuario ya está registrado');\r\n        }\r\n\r\n        // Hash de la contraseña\r\n        const hashedPassword = await authMiddleWare.getHash(password);\r\n\r\n        // Registrar el usuario en la base de datos\r\n        await usuarioModel.registrar(nombre, email, hashedPassword);\r\n\r\n        // Usuario insertado correctamente\r\n        res.redirect('/login');\r\n    } catch (error) {\r\n        console.log(\"error en el registro\");\r\n        console.error(error.message);\r\n        res.status(500).send('Error interno del servidor');\r\n    }\r\n}\r\n\r\nasync function obtenerUsuarioPorNombre(req, res) {\r\n    try {\r\n        const { nombre } = req.params;\r\n        const usuario = await usuarioModel.obtenerPorNombre(nombre);\r\n        if (usuario) {\r\n            res.json(usuario);\r\n        } else {\r\n            res.status(404).send('Usuario no encontrado');\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send('Error al obtener usuario por nombre');\r\n    }\r\n}\r\n\r\nasync function obtenerUsuarioPorId(req, res) {\r\n    try {\r\n        const { id } = req.params;\r\n        const usuario = await usuarioModel.obtenerPorId(id);\r\n        if (usuario) {\r\n            res.json(usuario);\r\n        } else {\r\n            res.status(404).send('Usuario no encontrado');\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send('Error al obtener usuario por ID');\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    registrarUsuario,\r\n    obtenerUsuarioPorNombre,\r\n    obtenerUsuarioPorId,\r\n};\r\n"],"file":"userController.dev.js"}