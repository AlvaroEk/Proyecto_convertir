{"version":3,"sources":["conversionController.js"],"names":["sharp","require","potrace","insertarRegistro","convertirImagen","req","res","file","status","send","formatoDestino","body","opciones","toUpperCase","toLowerCase","buffer","toBuffer","Promise","resolve","reject","trace","threshold","err","svg","toFormat","originalname","conversionesRealizadas","session","isAuthenticated","redirect","set","console","error","module","exports"],"mappings":"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","sourcesContent":["const sharp = require('sharp');\r\nconst potrace = require('potrace');\r\nconst { insertarRegistro } = require('../models/historymodel');\r\n\r\nasync function convertirImagen(req, res) {\r\n  try {\r\n    // Verificar si se ha proporcionado un archivo y si es una imagen\r\n    if (!req.file) {\r\n      return res.status(400).send('No se ha proporcionado ningún archivo');\r\n    }\r\n\r\n    let formatoDestino = 'png'; // Predeterminado a PNG\r\n\r\n    if (req.body.opciones) {\r\n      const opciones = req.body.opciones.toUpperCase();\r\n      if (opciones === 'JPEG') {\r\n        formatoDestino = 'jpeg'; \r\n      } else if (opciones === 'JPG') {\r\n        formatoDestino = 'jpg'; \r\n      } else if (opciones === 'SVG' || opciones === 'PNG' || opciones === 'WEBP') {\r\n        formatoDestino = opciones.toLowerCase(); \r\n      }\r\n    }\r\n\r\n    // Convertir la imagen a formato destino\r\n    let buffer;\r\n    if (formatoDestino === 'svg') {\r\n      buffer = await sharp(req.file.buffer).toBuffer();\r\n      buffer = await new Promise((resolve, reject) => {\r\n        potrace.trace(buffer, { threshold: 128 }, (err, svg) => {\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            resolve(svg);\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      buffer = await sharp(req.file.buffer).toFormat(formatoDestino).toBuffer();\r\n    }\r\n    \r\n\r\n    // Insertar un registro en la base de datos\r\n    await insertarRegistro(req.file.originalname, `imagen_convertida.${formatoDestino}`, formatoDestino);\r\n\r\n    let conversionesRealizadas = req.session.conversionesRealizadas || 0;\r\n\r\n    if (!req.isAuthenticated()) {\r\n      // Si el usuario no está autenticado, verificar el límite de conversiones\r\n      if (conversionesRealizadas < 3) {\r\n        conversionesRealizadas++;\r\n        req.session.conversionesRealizadas = conversionesRealizadas;\r\n      } else {\r\n        // Si el usuario ha realizado tres conversiones y no está autenticado, redirigir al usuario al inicio de sesión\r\n        return res.redirect('/login');\r\n      }\r\n    }\r\n\r\n    // Configurar el encabezado Content-Disposition para que el navegador descargue la imagen\r\n    res.set({\r\n      'Content-Type': `image/${formatoDestino}`, // Tipo de contenido de salida: PNG, JPEG, SVG, WEBP\r\n      'Content-Disposition': `attachment; filename=\"imagen_convertida.${formatoDestino}\"`, // Nombre del archivo a descargar\r\n    });\r\n\r\n    // Enviar la imagen convertida al cliente\r\n    res.send(buffer);\r\n    \r\n  } catch (error) {\r\n    console.error('Error al convertir la imagen:', error);\r\n    res.status(500).send('Error interno del servidor');\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  convertirImagen,\r\n};\r\n"],"file":"conversionController.dev.js"}