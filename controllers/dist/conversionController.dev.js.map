{"version":3,"sources":["conversionController.js"],"names":["sharp","require","create","exports","convertirImagen","req","res","file","status","send","formatoDestino","body","opciones","toUpperCase","canvas","size","buffer","toBuffer","imageData","image","imagenConvertida","svg","set","toFormat","console","error"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;eACmBA,OAAO,CAAC,kBAAD,C;IAAlBC,M,YAAAA,M,EAAwC;;;AAEhDC,OAAO,CAACC,eAAR,GAA0B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,cAGjBD,GAAG,CAACE,IAHa;AAAA;AAAA;AAAA;;AAAA,2CAIbD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAArB,CAJa;;AAAA;AAQlBC,UAAAA,cARkB,GAQD,KARC,EAQM;;AAE5B,cAAIL,GAAG,CAACM,IAAJ,CAASC,QAAb,EAAuB;AACfA,YAAAA,QADe,GACJP,GAAG,CAACM,IAAJ,CAASC,QAAT,CAAkBC,WAAlB,EADI;;AAErB,gBAAID,QAAQ,KAAK,MAAjB,EAAyB;AACvBF,cAAAA,cAAc,GAAG,MAAjB;AACD,aAFD,MAEO,IAAIE,QAAQ,KAAK,KAAjB,EAAwB;AAC7BF,cAAAA,cAAc,GAAG,KAAjB;AACD;AACF;;AAjBqB,gBAmBlBL,GAAG,CAACM,IAAJ,CAASC,QAAT,KAAsB,KAnBJ;AAAA;AAAA;AAAA;;AAoBpB;AACME,UAAAA,MArBc,GAqBLZ,MAAM,GAAGa,IAAT,CAAc,GAAd,EAAmB,GAAnB,CArBK,EAuBpB;;AAvBoB;AAAA,0CAwBIf,KAAK,CAACK,GAAG,CAACE,IAAJ,CAASS,MAAV,CAAL,CAAuBC,QAAvB,EAxBJ;;AAAA;AAwBdC,UAAAA,SAxBc;AAyBpBJ,UAAAA,MAAM,CAACK,KAAP,CAAaD,SAAb,EAAwBH,IAAxB,CAA6B,GAA7B,EAAkC,GAAlC,EAzBoB,CA2BpB;;AACAK,UAAAA,gBAAgB,GAAGN,MAAM,CAACO,GAAP,EAAnB,CA5BoB,CA8BpB;;AACAf,UAAAA,GAAG,CAACgB,GAAJ,CAAQ,cAAR,EAAwB,eAAxB;AA/BoB;AAAA;;AAAA;AAAA;AAAA,0CAkCKtB,KAAK,CAACK,GAAG,CAACE,IAAJ,CAASS,MAAV,CAAL,CAAuBO,QAAvB,CAAgCb,cAAhC,EAAgDO,QAAhD,EAlCL;;AAAA;AAkCpBG,UAAAA,gBAlCoB;AAoCpB;AACAd,UAAAA,GAAG,CAACgB,GAAJ,CAAQ;AACN,4CAAyBZ,cAAzB,CADM;AACqC;AAC3C,sFAAkEA,cAAlE,OAFM,CAE+E;;AAF/E,WAAR;;AArCoB;AA2CtB;AACAJ,UAAAA,GAAG,CAACG,IAAJ,CAASW,gBAAT;AA5CsB;AAAA;;AAAA;AAAA;AAAA;AA8CtBI,UAAAA,OAAO,CAACC,KAAR,CAAc,+BAAd;AACAnB,UAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAArB;;AA/CsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B","sourcesContent":["const sharp = require('sharp');\r\nconst { create } = require('@svgdotjs/svg.js'); // Importa 'create' desde svg.js\r\n\r\nexports.convertirImagen = async (req, res) => {\r\n  try {\r\n    // Verificar si se ha proporcionado un archivo y si es una imagen\r\n    if (!req.file) {\r\n      return res.status(400).send('No se ha proporcionado ningún archivo');\r\n    }\r\n\r\n    let imagenConvertida;\r\n    let formatoDestino = 'PNG'; // Predeterminado a PNG\r\n    \r\n    if (req.body.opciones) {\r\n      const opciones = req.body.opciones.toUpperCase();\r\n      if (opciones === 'JPEG') {\r\n        formatoDestino = 'jpeg'; \r\n      } else if (opciones === 'JPG') {\r\n        formatoDestino = 'jpg'; \r\n      }\r\n    }\r\n\r\n    if (req.body.opciones === 'SVG') {\r\n      // Crea un lienzo SVG\r\n      const canvas = create().size(500, 500);\r\n\r\n      // Agrega la imagen al lienzo SVG\r\n      const imageData = await sharp(req.file.buffer).toBuffer();\r\n      canvas.image(imageData).size(500, 500);\r\n\r\n      // Obtén el SVG como una cadena\r\n      imagenConvertida = canvas.svg();\r\n\r\n      // Configura el encabezado Content-Type para la respuesta\r\n      res.set('Content-Type', 'image/svg+xml');\r\n    } else {\r\n      // Convertir la imagen al formato seleccionado\r\n      imagenConvertida = await sharp(req.file.buffer).toFormat(formatoDestino).toBuffer();\r\n\r\n      // Configurar el encabezado Content-Disposition para que el navegador descargue la imagen\r\n      res.set({\r\n        'Content-Type': `image/${formatoDestino}`, // Tipo de contenido de salida: PNG o JPEG\r\n        'Content-Disposition': `attachment; filename=\"imagen_convertida.${formatoDestino}\"`, // Nombre del archivo a descargar\r\n      });\r\n    }\r\n\r\n    // Enviar la imagen convertida al cliente\r\n    res.send(imagenConvertida);\r\n  } catch (error) {\r\n    console.error('Error al convertir la imagen:', error);\r\n    res.status(500).send('Error interno del servidor');\r\n  }\r\n};\r\n"],"file":"conversionController.dev.js"}