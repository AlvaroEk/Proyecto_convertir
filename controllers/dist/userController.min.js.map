{"version":3,"sources":["userController.js"],"names":["usuarioModel","require","authMiddleWare","registrarUsuario","req","res","_req$body","nombre","email","password","confirmPassword","hashedPassword","regeneratorRuntime","async","_context","prev","next","body","abrupt","status","send","awrap","obtenerPorNombre","sent","getHash","registrar","redirect","t0","console","log","error","message","usuarioExistente","stop","obtenerUsuarioPorNombre","usuario","_context2","params","json","obtenerUsuarioPorId","id","_context3","obtenerPorId","module","exports"],"mappings":"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","file":"userController.min.js","sourcesContent":["const usuarioModel = require('../models/usermodel');\r\nconst authMiddleWare = require('../middlewares/authMiddleware');\r\n\r\nasync function registrarUsuario(req, res) {\r\n    const { nombre, email, password, confirmPassword } = req.body;\r\n    try {\r\n        // Verificar si la contraseña y su confirmación coinciden\r\n        if (password !== confirmPassword) {\r\n            return res.status(400).send('Las contraseñas no coinciden');\r\n        }\r\n\r\n        // Verificar si el usuario ya está registrado\r\n        const usuarioExistente = await usuarioModel.obtenerPorNombre(nombre);\r\n        if (usuarioExistente) {\r\n            return res.status(400).send('El usuario ya está registrado');\r\n        }\r\n\r\n        // Hash de la contraseña\r\n        const hashedPassword = await authMiddleWare.getHash(password);\r\n\r\n        // Registrar el usuario en la base de datos\r\n        await usuarioModel.registrar(nombre, email, hashedPassword);\r\n\r\n        // Usuario insertado correctamente\r\n        res.redirect('/login');\r\n    } catch (error) {\r\n        console.log(\"error en el registro\");\r\n        console.error(error.message);\r\n        res.status(500).send('Error interno del servidor');\r\n    }\r\n}\r\n\r\nasync function obtenerUsuarioPorNombre(req, res) {\r\n    try {\r\n        const { nombre } = req.params;\r\n        const usuario = await usuarioModel.obtenerPorNombre(nombre);\r\n        if (usuario) {\r\n            res.json(usuario);\r\n        } else {\r\n            res.status(404).send('Usuario no encontrado');\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send('Error al obtener usuario por nombre');\r\n    }\r\n}\r\n\r\nasync function obtenerUsuarioPorId(req, res) {\r\n    try {\r\n        const { id } = req.params;\r\n        const usuario = await usuarioModel.obtenerPorId(id);\r\n        if (usuario) {\r\n            res.json(usuario);\r\n        } else {\r\n            res.status(404).send('Usuario no encontrado');\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send('Error al obtener usuario por ID');\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    registrarUsuario,\r\n    obtenerUsuarioPorNombre,\r\n    obtenerUsuarioPorId,\r\n};\r\n"]}