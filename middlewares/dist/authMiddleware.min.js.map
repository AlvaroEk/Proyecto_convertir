{"version":3,"sources":["authMiddleware.js"],"names":["jwt","require","authenticate","req","res","next","token","redirect","decoded","verify","process","env","ACCESS_TOKEN_SECRET","userId","err","generateToken","module","exports"],"mappings":"aACA,IAAMA,IAAMC,QAAQ,gBAApB,SAASC,aAAWC,EAAAC,EAADC,GAEnB,IAASH,EAAAA,EAAaC,QAAtBG,MAKI,IAAKA,EAAAA,OAAOF,EAAAG,SAAA,UAIZ,IACI,IAAAC,EAAAR,IAAAS,OAAAH,EAAAI,QAAAC,IAAAC,qBAIIC,EAAAA,OAASL,EAAQK,OAGvBR,IACE,MAAAS,GAEH,OAAAV,EAAAG,SAAA,WAKD,SAAAQ,cAAAF,GACkBA,OAAMb,IAANa,KAAAA,CAAAA,OAAAA,GAAAA,QAAAA,IAAAA,oBAAAA,CAAAA,UAAAA,OAA2CG,OAA7DC,QAAA,CACHf,aAAAA,aAIGa,cAAAA","file":"authMiddleware.min.js","sourcesContent":["// authMiddleware.js\r\nconst jwt = require('jsonwebtoken');\r\n\r\nfunction authenticate(req, res, next) {\r\n    // Verifica si hay un token en las cookies de la solicitud\r\n    const token = req.cookies.token;\r\n\r\n    // Si no hay token, redirige al usuario al login\r\n    if (!token) {\r\n        return res.redirect('/login');\r\n    }\r\n\r\n    try {\r\n        // Verifica el token usando la clave secreta\r\n        const decoded = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);\r\n\r\n        // Almacena el ID del usuario en la solicitud para su posterior uso\r\n        req.userId = decoded.userId;\r\n\r\n        next();\r\n    } catch (err) {\r\n        // Si hay un error en la verificación del token, redirige al usuario al login\r\n        return res.redirect('/login');\r\n    }\r\n}\r\n\r\n// Función para generar un token JWT\r\nfunction generateToken(userId) {\r\n    // Crea un token con el ID de usuario y una clave secreta\r\n    return jwt.sign({ userId }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '1h' });\r\n}\r\n\r\nmodule.exports = {\r\n    authenticate,\r\n    generateToken\r\n};"]}