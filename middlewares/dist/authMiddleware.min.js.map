{"version":3,"sources":["authMiddleware.js"],"names":["jwt","require","bcrypt","path","authenticate","req","res","next","token","decoded","regeneratorRuntime","async","_context","prev","config","cookies","console","log","abrupt","redirect","verify","process","env","ACCESS_TOKEN_SECRET","userId","t0","stop","sign","expiresIn","getHash","passwordString","saltRounds","password_hash","_context2","parseInt","PASSWORD_SALT_ROUNDS","awrap","hash","sent","comparePassword","bdHash","compareHashes","_context3","compare","dotenv","module","exports","generateToken"],"mappings":"aACA,IAAMA,IAAMC,QAAQ,gBADpBC,OAAAD,QAAA,UACMD,OAAMC,QAAQ,UAGdE,KAAOF,QAAQ,QAMrB,SAAeG,aAAaC,EAAKC,EAAKC,GAAtC,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAL,MAAA,KAAA,EAAA,GAFOO,EAAPT,EAAAU,QAAAP,MAEA,CAAAI,EAAAL,KAAA,EAAA,MAAA,OAAAS,QAAAC,IAAA,gBAAAL,EAAAM,OAAA,SAAAZ,EAAAa,SAAA,WAAA,KAAA,EAAAP,EAAAC,KAAA,EAYcJ,EAAUT,IAAIoB,OAAOZ,EAAOa,QAAQC,IAAIC,qBAZtDlB,EAAAmB,OAAAf,EAAAe,OAAAR,QAAAC,IAAA,6BAAAT,EAAAC,EAAAe,QAAAZ,EAAAL,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAK,EAAAC,KAAA,GAAAD,EAAAa,GAAAb,EAAA,MAAA,GAoBQI,QAAQC,IAAI,mCApBpBL,EAAAM,OAAA,SAAAZ,EAAAa,SAAA,WAAA,KAAA,GAAA,IAAA,MAAA,OAAAP,EAAAc,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAeQrB,SAAAA,cAAaI,GAfrB,OAAAT,IAAA2B,KAAA,CAAAH,OAAAA,GAAAH,QAAAC,IAAAC,oBAAA,CAAAK,UAAA,OAAA,SAAAC,QAAAC,GAAA,IAAAC,EAAAC,EAAA,OAAAtB,mBAAAC,MAAA,SAAAsB,GAAA,OAAA,OAAAA,EAAApB,KAAAoB,EAAA1B,MAAA,KAAA,EAAA,OAAAwB,EAAAG,SAAAb,QAAAC,IAAAa,sBAAAF,EAAA1B,KAAA,EAAAG,mBAAA0B,MAAAlC,OAAAmC,KAAAP,EAAAC,IAAA,KAAA,EAAA,OAAAC,EAAAC,EAAAK,KAAAL,EAAAf,OAAA,SAmBQc,GAnBR,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAP,UAAA,SAAAa,gBAAAT,EAAAU,GAAA,IAAAC,EAAA,OAAA/B,mBAAAC,MAAA,SAAA+B,GAAA,OAAA,OAAAA,EAAA7B,KAAA6B,EAAAnC,MAAA,KAAA,EAAA,OAAAS,QAAAC,IAAA,iBAAAa,GAAAd,QAAAC,IAAA,SAAAuB,GAAAE,EAAAnC,KAAA,EAAAG,mBAAA0B,MAAAlC,OAAAyC,QAAAb,EAAAU,IAAA,KAAA,EAAA,OAAAC,EAAAC,EAAAJ,KAAAI,EAAAxB,OAAA,SAAAuB,GAAA,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAhB,UAFAkB,OAAO9B,SA4BP+B,OAAAC,QAASC,CACL3C,aAAAA,aACA2C,cAAAA,cAAkBvB,QAAAA,QAAXe,gBAAAA","file":"authMiddleware.min.js","sourcesContent":["// authMiddleware.js\r\nconst jwt = require('jsonwebtoken');\r\nconst bcrypt = require('bcrypt');\r\nconst dotenv = require('dotenv');\r\nconst path = require('path');\r\n\r\n\r\n//Configura DotEnv\r\ndotenv.config();\r\n\r\nasync function authenticate(req, res, next) {\r\n    // Verifica si hay un token en las cookies de la solicitud\r\n    const token = req.cookies.token;\r\n\r\n    // Si no hay token, redirige al usuario al login\r\n    if (!token) {\r\n        console.log(\"no hay token\")\r\n        return res.redirect('/login');\r\n    }\r\n\r\n    try {\r\n        // Verifica el token usando la clave secreta\r\n        const decoded = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);\r\n\r\n        // Almacena el ID del usuario en la solicitud para su posterior uso\r\n        req.userId = decoded.userId;\r\n        console.log(\"token y decoded y userID\\n\",token, decoded, userId)\r\n\r\n    } catch (err) {\r\n        // Si hay un error en la verificación del token, redirige al usuario al login\r\n        console.log(\"hay un problema con el login xd\")\r\n        return res.redirect('/login');\r\n    }\r\n}\r\n\r\n// Función para generar un token JWT\r\nfunction generateToken(userId) {\r\n    // Crea un token con el ID de usuario y una clave secreta\r\n    return jwt.sign({ userId }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '1h' });\r\n}\r\n\r\nasync function getHash(passwordString) {\r\n    const saltRounds = parseInt(process.env.PASSWORD_SALT_ROUNDS);\r\n    const password_hash = await bcrypt.hash(passwordString, saltRounds);\r\n    return password_hash;\r\n}\r\n\r\n\r\n\r\nasync function comparePassword(passwordString, bdHash) {\r\n    console.log('passwordString',passwordString)\r\n    console.log('bdHash',bdHash)\r\n    const compareHashes = await bcrypt.compare(passwordString, bdHash);\r\n    return compareHashes;   \r\n}\r\n\r\n\r\nmodule.exports = {\r\n    authenticate,\r\n    generateToken,\r\n    getHash,\r\n    comparePassword\r\n};"]}