{"version":3,"sources":["authMiddleware.js"],"names":["jwt","require","authenticate","req","res","next","token","cookies","redirect","decoded","verify","process","env","ACCESS_TOKEN_SECRET","userId","err","generateToken","sign","expiresIn","module","exports"],"mappings":";;AAAA;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsC;AAClC;AACA,MAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYD,KAA1B,CAFkC,CAIlC;;AACA,MAAI,CAACA,KAAL,EAAY;AACR,WAAOF,GAAG,CAACI,QAAJ,CAAa,QAAb,CAAP;AACH;;AAED,MAAI;AACA;AACA,QAAMC,OAAO,GAAGT,GAAG,CAACU,MAAJ,CAAWJ,KAAX,EAAkBK,OAAO,CAACC,GAAR,CAAYC,mBAA9B,CAAhB,CAFA,CAIA;;AACAV,IAAAA,GAAG,CAACW,MAAJ,GAAaL,OAAO,CAACK,MAArB;AAEAT,IAAAA,IAAI;AACP,GARD,CAQE,OAAOU,GAAP,EAAY;AACV;AACA,WAAOX,GAAG,CAACI,QAAJ,CAAa,QAAb,CAAP;AACH;AACJ,C,CAED;;;AACA,SAASQ,aAAT,CAAuBF,MAAvB,EAA+B;AAC3B;AACA,SAAOd,GAAG,CAACiB,IAAJ,CAAS;AAAEH,IAAAA,MAAM,EAANA;AAAF,GAAT,EAAqBH,OAAO,CAACC,GAAR,CAAYC,mBAAjC,EAAsD;AAAEK,IAAAA,SAAS,EAAE;AAAb,GAAtD,CAAP;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACblB,EAAAA,YAAY,EAAZA,YADa;AAEbc,EAAAA,aAAa,EAAbA;AAFa,CAAjB","sourcesContent":["// authMiddleware.js\r\nconst jwt = require('jsonwebtoken');\r\n\r\nfunction authenticate(req, res, next) {\r\n    // Verifica si hay un token en las cookies de la solicitud\r\n    const token = req.cookies.token;\r\n\r\n    // Si no hay token, redirige al usuario al login\r\n    if (!token) {\r\n        return res.redirect('/login');\r\n    }\r\n\r\n    try {\r\n        // Verifica el token usando la clave secreta\r\n        const decoded = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);\r\n\r\n        // Almacena el ID del usuario en la solicitud para su posterior uso\r\n        req.userId = decoded.userId;\r\n\r\n        next();\r\n    } catch (err) {\r\n        // Si hay un error en la verificación del token, redirige al usuario al login\r\n        return res.redirect('/login');\r\n    }\r\n}\r\n\r\n// Función para generar un token JWT\r\nfunction generateToken(userId) {\r\n    // Crea un token con el ID de usuario y una clave secreta\r\n    return jwt.sign({ userId }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '1h' });\r\n}\r\n\r\nmodule.exports = {\r\n    authenticate,\r\n    generateToken\r\n};"],"file":"authMiddleware.dev.js"}