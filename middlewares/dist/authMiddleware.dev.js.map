{"version":3,"sources":["authMiddleware.js"],"names":["jwt","require","bcrypt","dotenv","path","config","authenticate","req","res","next","token","cookies","console","log","redirect","decoded","verify","process","env","ACCESS_TOKEN_SECRET","userId","generateToken","sign","expiresIn","getHash","passwordString","saltRounds","parseInt","PASSWORD_SALT_ROUNDS","hash","password_hash","comparePassword","bdHash","compare","compareHashes","module","exports"],"mappings":";;AAAA;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB,C,CAGA;;;AACAE,MAAM,CAACE,MAAP;;AAEA,SAAeC,YAAf,CAA4BC,GAA5B,EAAiCC,GAAjC,EAAsCC,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;AACMC,UAAAA,KAFV,GAEkBH,GAAG,CAACI,OAAJ,CAAYD,KAF9B,EAII;;AAJJ,cAKSA,KALT;AAAA;AAAA;AAAA;;AAMQE,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AANR,2CAOeL,GAAG,CAACM,QAAJ,CAAa,QAAb,CAPf;;AAAA;AAAA;AAWQ;AACMC,UAAAA,OAZd,GAYwBf,GAAG,CAACgB,MAAJ,CAAWN,KAAX,EAAkBO,OAAO,CAACC,GAAR,CAAYC,mBAA9B,CAZxB,EAcQ;;AACAZ,UAAAA,GAAG,CAACa,MAAJ,GAAaL,OAAO,CAACK,MAArB;AACAR,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAAyCH,KAAzC,EAAgDK,OAAhD,EAAyDK,MAAzD;AAhBR;AAAA;;AAAA;AAAA;AAAA;AAmBQ;AACAR,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AApBR,2CAqBeL,GAAG,CAACM,QAAJ,CAAa,QAAb,CArBf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAyBA;;;AACA,SAASO,aAAT,CAAuBD,MAAvB,EAA+B;AAC3B;AACA,SAAOpB,GAAG,CAACsB,IAAJ,CAAS;AAAEF,IAAAA,MAAM,EAANA;AAAF,GAAT,EAAqBH,OAAO,CAACC,GAAR,CAAYC,mBAAjC,EAAsD;AAAEI,IAAAA,SAAS,EAAE;AAAb,GAAtD,CAAP;AACH;;AAED,SAAeC,OAAf,CAAuBC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,UAAAA,UADV,GACuBC,QAAQ,CAACV,OAAO,CAACC,GAAR,CAAYU,oBAAb,CAD/B;AAAA;AAAA,0CAEgC1B,MAAM,CAAC2B,IAAP,CAAYJ,cAAZ,EAA4BC,UAA5B,CAFhC;;AAAA;AAEUI,UAAAA,aAFV;AAAA,4CAGWA,aAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAeC,eAAf,CAA+BN,cAA/B,EAA+CO,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AACIpB,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BY,cAA7B;AACAb,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBmB,MAArB;AAFJ;AAAA,0CAGgC9B,MAAM,CAAC+B,OAAP,CAAeR,cAAf,EAA+BO,MAA/B,CAHhC;;AAAA;AAGUE,UAAAA,aAHV;AAAA,4CAIWA,aAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQAC,MAAM,CAACC,OAAP,GAAiB;AACb9B,EAAAA,YAAY,EAAZA,YADa;AAEbe,EAAAA,aAAa,EAAbA,aAFa;AAGbG,EAAAA,OAAO,EAAPA,OAHa;AAIbO,EAAAA,eAAe,EAAfA;AAJa,CAAjB","sourcesContent":["// authMiddleware.js\r\nconst jwt = require('jsonwebtoken');\r\nconst bcrypt = require('bcrypt');\r\nconst dotenv = require('dotenv');\r\nconst path = require('path');\r\n\r\n\r\n//Configura DotEnv\r\ndotenv.config();\r\n\r\nasync function authenticate(req, res, next) {\r\n    // Verifica si hay un token en las cookies de la solicitud\r\n    const token = req.cookies.token;\r\n\r\n    // Si no hay token, redirige al usuario al login\r\n    if (!token) {\r\n        console.log(\"no hay token\")\r\n        return res.redirect('/login');\r\n    }\r\n\r\n    try {\r\n        // Verifica el token usando la clave secreta\r\n        const decoded = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);\r\n\r\n        // Almacena el ID del usuario en la solicitud para su posterior uso\r\n        req.userId = decoded.userId;\r\n        console.log(\"token y decoded y userID\\n\",token, decoded, userId)\r\n\r\n    } catch (err) {\r\n        // Si hay un error en la verificación del token, redirige al usuario al login\r\n        console.log(\"hay un problema con el login xd\")\r\n        return res.redirect('/login');\r\n    }\r\n}\r\n\r\n// Función para generar un token JWT\r\nfunction generateToken(userId) {\r\n    // Crea un token con el ID de usuario y una clave secreta\r\n    return jwt.sign({ userId }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '1h' });\r\n}\r\n\r\nasync function getHash(passwordString) {\r\n    const saltRounds = parseInt(process.env.PASSWORD_SALT_ROUNDS);\r\n    const password_hash = await bcrypt.hash(passwordString, saltRounds);\r\n    return password_hash;\r\n}\r\n\r\n\r\n\r\nasync function comparePassword(passwordString, bdHash) {\r\n    console.log('passwordString',passwordString)\r\n    console.log('bdHash',bdHash)\r\n    const compareHashes = await bcrypt.compare(passwordString, bdHash);\r\n    return compareHashes;   \r\n}\r\n\r\n\r\nmodule.exports = {\r\n    authenticate,\r\n    generateToken,\r\n    getHash,\r\n    comparePassword\r\n};"],"file":"authMiddleware.dev.js"}